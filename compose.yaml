version: '3'

services:
  api:
    build: .
    ports:
      - "3000:3000"
    depends_on:
      - mongodb
      - redis
      - rabbitmq
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGODB_URI=mongodb://mongodb:27017/multichat
      - REDIS_URI=redis://redis:6379
      - RABBITMQ_URI=amqp://rabbitmq
      - JWT_SECRET=your_jwt_secret_here
    restart: always
    networks:
      - app-network
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs

  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    depends_on:
      - mongodb
      - redis
      - rabbitmq
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/multichat
      - REDIS_URI=redis://redis:6379
      - RABBITMQ_URI=amqp://rabbitmq
    restart: always
    networks:
      - app-network
    volumes:
      - ./logs:/app/logs

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - app-network
    command: mongod --wiredTigerCacheSizeGB 1.5

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - api
    networks:
      - app-network
    restart: always

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  mongodb_data:
  redis_data:
  rabbitmq_data:

networks:
  app-network:
    driver: bridge